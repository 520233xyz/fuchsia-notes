From private communication with yifeit

vDSO 最大的优势在于保证二进制接口（ABI）兼容性的同时，不干扰升级系统调用的实现。
Linux 的系统调用 ABI 是基于处理器中断的，每个系统调用都有自己的系统调用编号，这
么多年来除了 syscall/sysenter 并没有本质上的升级。这是因为相当多的预编译好的程序
会不管三七二十一去调用中断。一旦 Linux 不再支持基于中断的系统调用接口，那这些现
有的应用程序除非返回源代码重新编译，否则无法正常运行。Fuchsia 非常重视 ABI 兼容
性，但同时也不希望放弃将来优化系统调用的机会。这类问题可以通过多加一层间接调用来
解决（Fundamental theorem of software engineering）。Fuchsia 里所有的系统调用都
必须由 vDSO 发起。用户代码要想调用系统函数就要先动态链接上 vDSO，再呼叫 vDSO 中
的某个函数，再由那个函数去调用系统。这样一来用户程序跟内核接口完全解耦，下一版
Fuchsia 无论是要改变系统调用的寄存器顺序，还是改换效率更高的调用约定，都可以通过
更新 vDSO 来无缝兼容现有的一切应用。另外，在 Linux 里遇到缓冲区溢出 bug，攻击者
能够注射一段调用系统函数的代码，从而拿到 shell。但是在 Fuchsia 里因为系统调用来
源强制限制为 vDSO，而 vDSO 所在的内存页面永远是只读页面，注入的代码并不能调用任
何系统函数，形成了 0-day 漏洞前方的最后一道防线。(因为vDSO的加载地址可以是随机
的，所以注入的代码不能直接调用vDSO里的函数)
